"""
Watchy e-ink display driver

(extremely WIP)
"""
import machine
from machine import Pin, SoftSPI as SPI
import micropython
import struct
import time

_CMD_DRIVER_CTL      = 0x01
_CMD_GATE_VOLTS_CTL  = 0x03
_CMD_SRC_VOLTS_CTL   = 0x04

_CMD_DEEP_SLEEP      = 0x10
_CMD_DATA_ENTRY      = 0x11
_CMD_SW_RESET        = 0x12

_CMD_MASTER_ACTIV    = 0x20  # "Activate Display Update Sequence"
                             # BUSY pad will output high during operation
_CMD_DISP_UPDATE1    = 0x21  # "RAM content option for Display Update"
_CMD_DISP_UPDATE2    = 0x22  # "Display Update Sequence Option: Enable the stage for Master Activation"
_CMD_WRITE_RAM_BW    = 0x24
_CMD_WRITE_RAM_RED   = 0x26

_CMD_RAM_OFFSETS_X   = 0x44  # DATA: 2 bytes (low 6 bits each) specifying X start/end offsets
_CMD_RAM_OFFSETS_Y   = 0x45  # DATA: 4 bytes (8+1 lowest bits x2 each) specifying Y start/end offsets
_CMD_RAM_START_X     = 0x4E  # DATA: 1 bytes, low 6 bits
_CMD_RAM_START_Y     = 0x4F  # DATA: 2 bytes, 8+1 low bits

# NOTE: these are GPIO pin numbers (i.e. IOxx on the Watchy sheet)
# Most pins initialized to HIGH
PIN_SCK = Pin(18, Pin.OUT, value=1)
PIN_SDA = Pin(23, Pin.OUT, value=1)

PIN_CS   = Pin(5, Pin.OUT, value=1)
PIN_DC   = Pin(10, Pin.OUT, value=1)
PIN_RES  = Pin(9, Pin.OUT, value=1)
PIN_BUSY = Pin(19, Pin.IN, value=1)

# NOT CONNECTED, but we are required to pass a pin for miso below
PIN_NC = Pin(25)

SPI = SPI(baudrate=20_000_000, sck=PIN_SCK, mosi=PIN_SDA, miso=PIN_NC)


# 'python-logo-master-v3-TM', 200x200px
# via image2cpp: http://javl.github.io/image2cpp/
pylogo = bytearray([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x0f, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x7f, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xc0, 
    0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xfe, 0x04, 0xff, 0xf1, 0xe0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xfc, 0x7f, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x24, 0xff, 
    0xf1, 0xe0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0x87, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x24, 0xff, 0xf0, 0xc0, 0x00, 0x1f, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0x20, 0xff, 0xf0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x7f, 
    0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2a, 0xff, 0xf0, 0x00, 0x00, 0x1f, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xf8, 0x7f, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 
    0x1f, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0x87, 0xff, 0xff, 0xff, 0x1f, 
    0xff, 0xff, 0x0f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x10, 0x3f, 0xff, 0xff, 0x00, 0x1f, 0xf0, 
    0xff, 0xe1, 0xc0, 0x07, 0x87, 0x80, 0xff, 0xf8, 0x03, 0xff, 0xf0, 0x03, 0xff, 0xff, 0xf0, 0x00, 
    0x00, 0x00, 0x10, 0x0f, 0xff, 0xfc, 0x00, 0x0f, 0xe0, 0xff, 0xc1, 0xc0, 0x07, 0x86, 0x00, 0x3f, 
    0xe0, 0x00, 0xff, 0xc0, 0x00, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x10, 0x07, 0xff, 0xf8, 0x00, 
    0x07, 0xe0, 0xff, 0xc1, 0xc0, 0x07, 0x80, 0x00, 0x1f, 0xc0, 0x00, 0x7f, 0x00, 0x00, 0x7f, 0xff, 
    0xc0, 0x00, 0x00, 0x00, 0x10, 0x07, 0xff, 0xf0, 0x3f, 0x83, 0xe0, 0xff, 0xc1, 0xf8, 0x7f, 0x80, 
    0x38, 0x1f, 0x81, 0xf0, 0x3e, 0x0f, 0xe0, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x10, 0x03, 0xff, 
    0xf0, 0xff, 0x83, 0xe0, 0xff, 0xc1, 0xf8, 0x7f, 0x81, 0xfe, 0x0f, 0x87, 0xf8, 0x3e, 0x1f, 0xf8, 
    0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x10, 0x03, 0xff, 0xf0, 0xff, 0xc1, 0xe0, 0xff, 0xc1, 0xf8, 
    0x7f, 0x83, 0xfe, 0x0f, 0x07, 0xfc, 0x1e, 0x1f, 0xf8, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x10, 
    0x03, 0xff, 0xf0, 0xff, 0xc1, 0xe0, 0xff, 0xc1, 0xf8, 0x7f, 0x87, 0xff, 0x0f, 0x0f, 0xfe, 0x1e, 
    0x1f, 0xf8, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf0, 0xff, 0xe0, 0xe0, 0xff, 
    0xc1, 0xf8, 0x7f, 0x87, 0xff, 0x0e, 0x0f, 0xfe, 0x0e, 0x1f, 0xf8, 0x3f, 0xff, 0x00, 0x00, 0x00, 
    0x00, 0x20, 0x01, 0xff, 0xf0, 0xff, 0xe0, 0xe0, 0xff, 0xc1, 0xf8, 0x7f, 0x87, 0xff, 0x0e, 0x0f, 
    0xfe, 0x0e, 0x1f, 0xf8, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0xff, 0xf0, 0xff, 0xe0, 
    0xe0, 0xff, 0xc1, 0xf8, 0x7f, 0x87, 0xff, 0x0e, 0x0f, 0xfe, 0x0e, 0x1f, 0xf8, 0x3f, 0xff, 0x00, 
    0x00, 0x00, 0x00, 0x80, 0x01, 0xff, 0xf0, 0xff, 0xe0, 0xe0, 0xff, 0xc1, 0xf8, 0x7f, 0x87, 0xff, 
    0x0e, 0x0f, 0xfe, 0x0e, 0x1f, 0xf8, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0xff, 0xf0, 
    0xff, 0xe0, 0xe0, 0xff, 0xc1, 0xf8, 0x7f, 0x87, 0xff, 0x0e, 0x0f, 0xfe, 0x0e, 0x1f, 0xf8, 0x3f, 
    0xff, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf0, 0xff, 0xe0, 0xe0, 0xff, 0xc1, 0xf8, 0x7f, 
    0x87, 0xff, 0x0e, 0x0f, 0xfe, 0x0e, 0x1f, 0xf8, 0x3f, 0xff, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 
    0xff, 0xf0, 0xff, 0xe0, 0xe0, 0xff, 0xc1, 0xf8, 0x7f, 0x87, 0xff, 0x0e, 0x0f, 0xfe, 0x0e, 0x1f, 
    0xf8, 0x3f, 0xff, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf0, 0xff, 0xe0, 0xe0, 0xff, 0xc1, 
    0xf8, 0x7f, 0x87, 0xff, 0x0e, 0x0f, 0xfe, 0x0e, 0x1f, 0xf8, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x01, 0xff, 0xf0, 0xff, 0xe0, 0xe0, 0xff, 0xc1, 0xf8, 0x7f, 0x87, 0xff, 0x0f, 0x0f, 0xfe, 
    0x0e, 0x1f, 0xf8, 0x3f, 0xff, 0x00, 0x10, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf0, 0xff, 0xc1, 0xe0, 
    0xff, 0xc1, 0xf8, 0x7f, 0x87, 0xff, 0x0f, 0x07, 0xfe, 0x1e, 0x1f, 0xf8, 0x3f, 0xff, 0x00, 0x10, 
    0x00, 0x00, 0x00, 0x03, 0xff, 0xf0, 0xff, 0xc1, 0xe0, 0xff, 0xc1, 0xf8, 0x7f, 0x87, 0xff, 0x0f, 
    0x07, 0xfc, 0x1e, 0x1f, 0xf8, 0x3f, 0xff, 0x80, 0x10, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf0, 0xff, 
    0x83, 0xf0, 0x7f, 0xc1, 0xf8, 0x7f, 0x87, 0xff, 0x0f, 0x87, 0xfc, 0x3e, 0x1f, 0xf8, 0x3f, 0xff, 
    0x80, 0x10, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf0, 0x3f, 0x03, 0xf0, 0x3f, 0x81, 0xf8, 0x3f, 0x87, 
    0xff, 0x0f, 0x83, 0xf8, 0x3e, 0x1f, 0xf8, 0x3f, 0xff, 0xc0, 0x10, 0x00, 0x00, 0x00, 0x07, 0xff, 
    0xf0, 0x00, 0x07, 0xf8, 0x00, 0x01, 0xfc, 0x1f, 0x87, 0xff, 0x0f, 0xc0, 0x00, 0x7e, 0x1f, 0xf8, 
    0x3f, 0xff, 0xc0, 0x10, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf0, 0x00, 0x0f, 0xfc, 0x00, 0x01, 0xfc, 
    0x07, 0x87, 0xff, 0x0f, 0xe0, 0x00, 0xfe, 0x1f, 0xf8, 0x3f, 0xff, 0xe0, 0x10, 0x00, 0x00, 0x00, 
    0x1f, 0xff, 0xf0, 0xc0, 0x1f, 0xfe, 0x00, 0x61, 0xff, 0x07, 0x87, 0xff, 0x0f, 0xf8, 0x03, 0xfe, 
    0x1f, 0xf8, 0x3f, 0xff, 0xfc, 0x10, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xf0, 0xf8, 0xff, 0xff, 0xff, 
    0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 
    0x00, 0x1f, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0xff, 0xff, 
    0xff, 0xff, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xf0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf0, 
    0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xf0, 0x00, 0x0e, 0x1f, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x0e, 0x1f, 0xff, 
    0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x0e, 0x1f, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xfe, 0x07, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 
    0x3f, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 
    0x80, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
    0x00, 0x00, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x01, 0xff, 0xff, 0xff, 0xfe, 0xff, 
    0xff, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xe0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
])

mplogo = bytearray([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x18, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 
    0x18, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x18, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 
    0x00, 0x00, 0x18, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x18, 0x00, 0x00, 0x0f, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xf0, 0x00, 0x00, 0x18, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x18, 0x00, 0x00, 
    0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x18, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x18, 
    0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x18, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 
    0x00, 0x18, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0x80, 0x18, 0x01, 0x80, 0x0f, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xf0, 0x01, 0x80, 0x18, 0x01, 0x80, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0x80, 0x18, 0x01, 0x80, 0x0f, 
    0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xf0, 0x01, 0x80, 0x18, 0x01, 0x80, 0x0f, 0xc3, 0xfc, 0x78, 0xff, 0xff, 0xff, 0xff, 
    0xfc, 0x03, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0x80, 0x18, 0x01, 
    0x80, 0x0f, 0xc3, 0xf8, 0x78, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0xff, 0xff, 0x8f, 0xcf, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0x80, 0x18, 0x01, 0x80, 0x0f, 0xc1, 0xf8, 0x7f, 0xff, 0xff, 
    0xff, 0xff, 0xfc, 0x78, 0x7f, 0xff, 0x8f, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0x80, 
    0x18, 0x01, 0x80, 0x0f, 0xc1, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7c, 0x7f, 0xff, 0x8f, 
    0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0x80, 0x18, 0x01, 0x80, 0x0f, 0xc1, 0xf0, 0x78, 
    0xfc, 0x07, 0x21, 0xe0, 0x7c, 0x7e, 0x67, 0xf1, 0x00, 0xc8, 0x1f, 0xc0, 0xf8, 0x83, 0xff, 0xf0, 
    0x01, 0x80, 0x18, 0x01, 0x80, 0x0f, 0xc0, 0xf2, 0x78, 0xf0, 0x07, 0x01, 0x80, 0x3c, 0x7e, 0x67, 
    0xf2, 0x00, 0xc0, 0x0f, 0x80, 0x78, 0x01, 0xff, 0xf0, 0x01, 0x80, 0x18, 0x01, 0x80, 0x0f, 0xc4, 
    0xe2, 0x78, 0xf1, 0xff, 0x0f, 0x8e, 0x1c, 0x7c, 0x63, 0xe3, 0x8f, 0xc3, 0x8f, 0x1e, 0x38, 0x78, 
    0xff, 0xf0, 0x01, 0x80, 0x18, 0x01, 0x80, 0x0f, 0xc4, 0xe6, 0x78, 0xe3, 0xff, 0x1f, 0x1f, 0x1c, 
    0x7c, 0x73, 0xe3, 0x8f, 0xc7, 0xce, 0x3e, 0x38, 0xf8, 0xff, 0xf0, 0x01, 0x80, 0x18, 0x01, 0x80, 
    0x0f, 0xc4, 0x66, 0x78, 0xe7, 0xff, 0x1f, 0x1f, 0x9c, 0x00, 0xf1, 0xe7, 0x8f, 0xc7, 0xc6, 0x3f, 
    0x18, 0xfc, 0xff, 0xf0, 0x01, 0x80, 0x18, 0x01, 0x80, 0x0f, 0xc6, 0x46, 0x78, 0xe7, 0xff, 0x3f, 
    0x1f, 0x9c, 0x01, 0xf1, 0xc7, 0x8f, 0xcf, 0xc6, 0x3f, 0x18, 0xfc, 0xff, 0xf0, 0x01, 0x80, 0x18, 
    0x01, 0x80, 0x0f, 0xc6, 0x0e, 0x78, 0xe7, 0xff, 0x3f, 0x3f, 0x8c, 0x7f, 0xf9, 0xc7, 0x8f, 0xcf, 
    0xc6, 0x3f, 0x18, 0xfc, 0xff, 0xf0, 0x01, 0x80, 0x18, 0x01, 0x80, 0x0f, 0xc6, 0x0e, 0x78, 0xe7, 
    0xff, 0x3f, 0x1f, 0x9c, 0x7f, 0xf8, 0x8f, 0x8f, 0xcf, 0xc6, 0x3f, 0x18, 0xfc, 0xff, 0xf0, 0x01, 
    0x80, 0x18, 0x01, 0x80, 0x0f, 0xc7, 0x1e, 0x78, 0xe7, 0xff, 0x3f, 0x1f, 0x9c, 0x7f, 0xfc, 0x8f, 
    0x8f, 0xcf, 0xc6, 0x3f, 0x18, 0xfc, 0xff, 0xf0, 0x01, 0x80, 0x18, 0x01, 0x80, 0x0f, 0xc7, 0x1e, 
    0x78, 0xe3, 0xff, 0x3f, 0x1f, 0x1c, 0x7f, 0xfc, 0x1f, 0x8f, 0xcf, 0xc6, 0x3e, 0x38, 0xfc, 0xff, 
    0xf0, 0x01, 0x80, 0x18, 0x01, 0x80, 0x0f, 0xc7, 0xfe, 0x78, 0xe1, 0xff, 0x3f, 0x8f, 0x1c, 0x7f, 
    0xfe, 0x1f, 0x8f, 0xcf, 0xc7, 0x1e, 0x38, 0xfc, 0xff, 0xf0, 0x01, 0x80, 0x18, 0x01, 0x80, 0x0f, 
    0xc7, 0xfe, 0x78, 0xf0, 0x07, 0x3f, 0x80, 0x3c, 0x7f, 0xfe, 0x1f, 0xc0, 0xcf, 0xc7, 0x00, 0x78, 
    0xfc, 0xff, 0xf0, 0x01, 0x80, 0x18, 0x01, 0x80, 0x0f, 0xc7, 0xfe, 0x78, 0xf8, 0x07, 0x3f, 0xc0, 
    0x7c, 0x7f, 0xfe, 0x3f, 0xc0, 0xcf, 0xc7, 0x80, 0xf8, 0xfc, 0xff, 0xf0, 0x01, 0x80, 0x18, 0x01, 
    0x80, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0x80, 0x18, 0x01, 0x80, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0x80, 
    0x18, 0x01, 0x80, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0x80, 0x18, 0x01, 0x80, 0x0f, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 
    0x01, 0x80, 0x18, 0x01, 0x80, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0x80, 0x18, 0x01, 0x80, 0x0f, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xf0, 0x01, 0x80, 0x00, 0x01, 0x80, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0x80, 0x00, 0x01, 0x80, 
    0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xf0, 0x01, 0x80, 0x00, 0x01, 0x83, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0x80, 0x00, 
    0x01, 0x83, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0x80, 0x00, 0x01, 0x83, 0x0f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 
    0x80, 0x00, 0x01, 0x83, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0x80, 0x00, 0x01, 0x80, 0x0f, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xf0, 0x01, 0x80, 0x00, 0x01, 0x80, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0x00, 0x00, 0x00, 0x80, 0x0f, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xf0, 0x01, 0x00, 0x00, 0x00, 0x80, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
])

# 'Espressif_ESP32-PICO-D4_Size', 200x76px
esp32logo = bytearray([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x31, 0x8c, 0x63, 0x18, 0xc6, 0x31, 0x8c, 
    0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xfe, 0x31, 0x8c, 0x63, 0x18, 0xc6, 0x31, 0x8c, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0x83, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x83, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x01, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xfc, 0x83, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x3f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x81, 0xc0, 0x00, 0x00, 0x0f, 
    0x80, 0x00, 0x00, 0x01, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x83, 0xe0, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 
    0x13, 0xf8, 0xf8, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x80, 0x00, 0x00, 0x33, 0xfe, 0x7c, 0x00, 0x00, 0x01, 0x3f, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x80, 
    0x00, 0x00, 0x23, 0xff, 0x3e, 0x00, 0x00, 0x01, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x80, 0x00, 0x00, 0x40, 0x3f, 0x8e, 0x00, 0x00, 
    0x01, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0x80, 0x00, 0x00, 0x47, 0x0f, 0xef, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x9f, 0xe3, 0xe7, 
    0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xfc, 0x80, 0x00, 0x00, 0xbf, 0xf9, 0xf3, 0x80, 0x00, 0x01, 0x3f, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x80, 0x00, 0x00, 0xbf, 
    0xfc, 0xf9, 0x80, 0x00, 0x01, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xfc, 0x80, 0x00, 0x00, 0xbc, 0x7e, 0x7d, 0x80, 0x00, 0x01, 0x3f, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 
    0x00, 0xbc, 0x1f, 0x3c, 0x80, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0xbf, 0xcf, 0xbc, 0x80, 0x00, 0x01, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
    0x80, 0x00, 0x00, 0x9f, 0xe7, 0x9e, 0x00, 0x00, 0x01, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x80, 0x00, 0x00, 0x8f, 0xf3, 0xde, 0x00, 
    0x00, 0x01, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xfc, 0x80, 0x00, 0x00, 0x81, 0xfb, 0xce, 0x00, 0x00, 0x01, 0x3f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x40, 0x79, 
    0xcf, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x47, 0x79, 0xee, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x80, 0x00, 0x00, 
    0x6f, 0x3d, 0xee, 0x00, 0x00, 0x01, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x80, 0x00, 0x00, 0x2f, 0x3d, 0xe0, 0x00, 0x00, 0x01, 0x3f, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x80, 
    0x00, 0x00, 0x16, 0x39, 0xe0, 0x00, 0x00, 0x01, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x08, 0x79, 0xc6, 0x00, 0x00, 
    0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0x80, 0x00, 0x00, 0x06, 0x39, 0x8c, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x80, 0x00, 0x00, 0x03, 0x80, 0x30, 
    0x00, 0x00, 0x01, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xfc, 0x80, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0x01, 0x3f, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x80, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x01, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
    0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
    0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x01, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xfc, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x3f, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x80, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x3f, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 
    0xfe, 0x0f, 0xe0, 0xff, 0x07, 0xf0, 0x3f, 0xc1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xfc, 0x3c, 0x70, 0xff, 0x86, 0x3c, 0x39, 
    0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xfc, 0x86, 0x00, 0x30, 0x00, 0xc1, 0xc0, 0x0c, 0x00, 0x61, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x86, 0x00, 0x30, 0x00, 0xc0, 0xc0, 
    0x0c, 0x00, 0x71, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xfc, 0x86, 0x00, 0x30, 0x00, 0xc0, 0xc0, 0x0c, 0x00, 0x71, 0x3f, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x86, 0x00, 0x38, 0x00, 
    0xc0, 0xc0, 0x1c, 0x00, 0x61, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xfc, 0x3f, 0x00, 0xc1, 0xc1, 0xf8, 0x00, 0xe1, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x87, 0xfc, 
    0x0f, 0xe0, 0xff, 0x81, 0xf8, 0x00, 0xc1, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x86, 0x00, 0x01, 0xf0, 0xff, 0x00, 0x1c, 0x01, 0x81, 
    0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
    0x86, 0x00, 0x00, 0x30, 0xc0, 0x00, 0x0c, 0x03, 0x01, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x86, 0x00, 0x00, 0x38, 0xc0, 0x00, 0x0c, 
    0x06, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0x86, 0x00, 0x00, 0x38, 0xc0, 0x00, 0x0c, 0x0c, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x86, 0x00, 0x00, 0x30, 0xc0, 
    0x00, 0x0c, 0x18, 0x01, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xfc, 0x86, 0x00, 0x30, 0x70, 0xc0, 0x0c, 0x1c, 0x38, 0x01, 0x3f, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x87, 0xfe, 0x3f, 
    0xe0, 0xc0, 0x0f, 0xf8, 0x3f, 0xf1, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x07, 0x80, 0x00, 0x03, 0xc0, 0x00, 0x01, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x01, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xfc, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xfe, 0x31, 0x8c, 0x63, 0x18, 0xc6, 0x31, 0x8c, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x31, 0x8c, 0x63, 0x18, 
    0xc6, 0x31, 0x8c, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
])

def dump_pins():
    names = ("PIN_CS", "PIN_DC", "PIN_RES", "PIN_BUSY")
    vals = (PIN_CS(), PIN_DC(), PIN_RES(), PIN_BUSY())

    for n in names:
        print("{:>12s}".format(n), end="")
    print()
    for v in vals:
        print("{:>12d}".format(v), end="")
    print()

dump_pins()


@micropython.native
def _write(buf: bytearray):
    # Ported from SPI_Write() in the demo ESP32 app for the GDEH0154D67
    for b in buf:
        for _ in range(8):
            PIN_SCK.off()
            if b & 0b1000_0000:
                PIN_SDA.on()
            else:
                PIN_SDA.off()
            b = b << 1
            PIN_SCK.on()
        # delay(1e-3, verbose=False)


def dump_data(data):
    for cnt, b in enumerate(data[:10]):
        print("{:02x}".format(b), end=" ")
        if cnt and cnt % 16 == 0:
            print("\n\t", end="")
    if len(data) > 10:
        print(" ... ({:d} bytes)".format(len(data)))
    else:
        print()


# TODO: can commands be queued? calling SPI.write() as much as I do may be wasting a lot of time
# TODO: ...can I profile that, somehow?
@micropython.native
def CMD(cmd, data=None, verbose=False, comment=""):
    if(verbose):
        print("CMD>> {:<10s} {:02x} | ".format(comment, cmd), end="")

    if isinstance(cmd, int):
        assert 0 < cmd < 256
        cmd = struct.pack(">B", cmd)

    PIN_CS(0)
    PIN_DC(0)

    dt = 0
    start = time.time_ns()
    # _write(cmd)
    SPI.write(cmd)
    dt += (time.time_ns() - start)/1e9

    PIN_DC(1)

    if data != None:
        if not isinstance(data, (bytes, bytearray)):
            raise TypeError("data must be bytes or bytearray")
        start = time.time_ns()
        SPI.write(data)
        dt += (time.time_ns() - start)/1e9
        if verbose:
            dump_data(data)
    else:
        if verbose:
            print("<no DATA>")

    if verbose:
        print("Spent {:03e} seconds in SPI ({} bytes/sec)".format(dt, (data and len(data) or 1)/dt))

    PIN_DC(0)
    PIN_CS(1)


def EPD_wait(MAX_WAIT=None, noraise=True):
    MAX_WAIT = MAX_WAIT and MAX_WAIT*1e9  # sec -> ns
    # print("Waiting on PIN_BUSY")
    start = time.time_ns()
    while PIN_BUSY() > 0:
        if MAX_WAIT and time.time_ns() - start >= MAX_WAIT:
            if noraise:
                print("Timed out waiting on PIN_BUSY (no error)")
            else:
                raise RuntimeError("Timed out waiting on PIN_BUSY")
        time.sleep(10e-9)  # 10 ns is the SPI rise time, seems like a sane minimum wait
    else:
        # print("PIN_BUSY is low, done waiting after {:.3e} sec".format((time.time_ns() - start)/1e9))
        pass


def delay(dt, verbose=False):
    if verbose:
        print("Delay: {} sec".format(dt))
    time.sleep(dt)

def EPD_hw_reset():
    # NOTE: the datasheet doesn't explicitly mention doing this after sending commands etc.,
    #       but I'm pretty sure this can be done at any point after applying VCI
    #       (i.e. while Watchy is powered on), especially since it's called "Software Reset"
    # print("Beginning soft reset")
    EPD_RESET_TIME = 10e-3  # datasheet calls for 10 ms, GxEPD2 uses 20 ms

    PIN_DC(1)
    PIN_CS(1)
    PIN_SDA(1)
    PIN_SCK(1)
    # PIN_BUSY.init(mode=Pin.OUT)
    PIN_BUSY(1)  # FIXME: not necessary?

    dump_pins()

    PIN_RES(1)
    delay(EPD_RESET_TIME)
    PIN_RES(0)
    dump_pins()
    delay(EPD_RESET_TIME)
    PIN_RES(1)
    dump_pins()

    delay(200e-3)  # GxEPD2 does an extra-long wait here


def EPD_init():
    # print("Sending initialization code")
    CMD(_CMD_DRIVER_CTL, data=b"\xc7\x00\x00", comment="DRVR_CTL")
    #   9 bits (2 bytes) of gate MUX
    # + 3 bits (1 byte) of gate driver scanning order
    #   xxxxxxxx  # 8 bits MUX
    #   0000000x  # 1 bit MUX
    #   00000xxx  # 3 bits scan order

    # These...don't match the datasheet? But both GxEPD2 and the sample do this
    # print("Setting border waveform")
    # CMD(0x3C, data=b"\x05", comment="??")  # BorderWavefrom
    # print(""""Reading" the temperature sensor""")
    # CMD(0x18, data=b"\x80", comment="??")  # Reading temperature sensor
    # CMD(0x1A, b"\x0190", comment="??")
    # CMD(0x22, b"\xb1", comment="??")
    CMD(_CMD_SW_RESET, comment="SW_RESET")
    CMD(_CMD_MASTER_ACTIV, comment="M_ACTIV")


def EPD_screen_ready():
    # print("EPD_screen_ready()")
    CMD(_CMD_DATA_ENTRY, b"\x03", comment="DATA_ENTRY")  # set RAM address order
    CMD(_CMD_RAM_OFFSETS_X, b"\x00\x18")
    CMD(_CMD_RAM_OFFSETS_Y, b"\x00\x00\xc7\x00")
    CMD(_CMD_RAM_START_X, data=b"\x00")        # set RAM x address count to 0
    CMD(_CMD_RAM_START_Y, data=b"\x00\x00")  # set RAM y address count to 199
    # CMD(_CMD_MASTER_ACTIV, comment="M_ACTIV")
    # EPD_wait(2)


def EPD_screen_update():
    # print("Performing screen update")
    CMD(_CMD_DISP_UPDATE2, b"\xf4", comment="DISP_UP2")
    CMD(_CMD_MASTER_ACTIV, comment="M_ACTIV")
    EPD_wait()


def EPD_screen_update_partial():
    # print("Performing screen update")
    # CMD(_CMD_DISP_UPDATE2, b"\xfc", comment="DISP_UP2")
    CMD(_CMD_DISP_UPDATE2, b"\xfc", comment="DISP_UP2")
    CMD(_CMD_MASTER_ACTIV, comment="M_ACTIV")
    EPD_wait()

def draw_buf(buf, partial=False):
    EPD_screen_ready()
    CMD(_CMD_WRITE_RAM_BW, buf)
    if partial:
        EPD_screen_update_partial()
    else:
        EPD_screen_update()

@micropython.native
def fill_screen(val):
    EPD_screen_ready()
    if isinstance(val, int):
        val = struct.pack(">B", val)

    # TODO: would be nice to have a C function that loops here instead
    data = val*5000
    CMD(_CMD_WRITE_RAM_BW, data, verbose=False)
    CMD(_CMD_WRITE_RAM_RED, data, verbose=False)
    EPD_screen_update()


def demo():
    EPD_hw_reset()
    EPD_init()

    # Configure address counter order (01 = decrementing Y, incrementing X)
    # print("Configure address counter order")
    CMD(_CMD_DATA_ENTRY, b"\x03", comment="DATA_ENTRY")

    # Configure X/Y RAM extent
    #
    # NOTE: original sample says "0x0C --> (18+1)*8 = 200" and I have no idea what the 0x0C is...
    #
    # 0xc7 = 199, so the Y part of this makes sense to me
    # which I think means there are 0x19 = 25 addressable lines of 8 pixels apiece (25*8 = 200)
    # i.e. I know the screen is logically divided up like:
    #
    #       ,_____,_____,_____,       ,______,______,______,
    #       |     |     |     |       |      |      |      |
    #       | x=0 | x=1 | x=2 |  ...  | x=23 | x=24 | x=25 |
    #       | y=0 | y=0 | y=0 |       | y=0  | y=0  | y=0  |
    #       `-----´-----`-----´       `------´------`------´
    #       ,_____,_____,_____,       ,_____,_____,_____,
    #       |     |     |     |       |     |     |     |
    #       | x=0 | x=1 | x=2 |  ...  | x17 | x18 | x19 |
    #       | y=1 | y=1 | y=1 |       |     |     |     |
    #       `-----´-----`-----´       `-----´-----`-----´
    #
    # and since we know X is addressed with fewer bits, its probably laid out in 
    # memory like this:
    #
    #           ---------SCREEN RAM BEGIN-------------
    #
    #  $00000      XX XX XX XX  |  x =  0,  y =   0
    #  $00004      XX XX XX XX  |  x =  1,  y =   0
    #  $00008      XX XX XX XX  |  x =  2,  y =   0
    #                          ...
    #  $09c38      XX XX XX XX  |  x = 24,  y =   0
    #  $09c3c      XX XX XX XX  |  x = 25,  y =   0
    #
    #           ----------HLINE BOUNDARY--------------
    #
    #  $09c40      XX XX XX XX  |  x =  0,  y =   1
    #  $09c44      XX XX XX XX  |  x =  1,  y =   1
    #  $09c48      XX XX XX XX  |  x =  2,  y =   1
    #
    #                          ...
    #
    #  $13878      XX XX XX XX  |  x = 24,  y =   1
    #  $1387c      XX XX XX XX  |  x = 25,  y =   1
    #
    #           ----------HLINE BOUNDARY--------------
    #
    #                  ... and so on ...
    #
    #            ------SCREEN RAM END------------
    #
    # and given x,y, you calculate the offset from $BEGIN as:
    #       px = $BEGIN + y*199 + x
    #
    # print("Configure screen layout")
    CMD(_CMD_RAM_OFFSETS_X, b"\x00\x18")
    CMD(_CMD_RAM_OFFSETS_Y, b"\x00\x00\xc7\x00")
    # print("Setting border waveform")
    # print("Setting initial X/Y address counts")
    CMD(_CMD_RAM_START_X, data=b"\00")        # set RAM x address count to 0
    CMD(_CMD_RAM_START_Y, data=b"\x00\x00")  # set RAM y address count to 199
    CMD(_CMD_DISP_UPDATE2, data=b"\xF8")
    CMD(_CMD_MASTER_ACTIV)
    EPD_wait()

    fill_screen(b"\xFF")
    data = [pylogo, mplogo, esp32logo]
    n = 0
    for idx in range(3): 
        fill_screen(b"\x00")
        fill_screen(b"\xFF")
        for n in range(10):
            EPD_screen_ready()
            CMD(_CMD_RAM_START_X, data=b"\x00")        # set RAM x address count to 0
            for m in range(3):
                if idx % 2 == 0:
                    CMD(_CMD_WRITE_RAM_BW, data[(n+m)%len(data)])
                if idx > 0:
                    CMD(_CMD_WRITE_RAM_RED, data[(n+m)%len(data)])
            n = (n+1)%len(data)
            EPD_screen_update_partial()
        time.sleep(1)

    CMD(_CMD_DEEP_SLEEP)

if __name__ == "__main__":
    demo()
